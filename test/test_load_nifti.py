import numpy as np


class TestLoadPatientScan:

    # Correctly loads volume and mask for a valid patient ID
    def test_correctly_loads_volume_and_mask_for_valid_patient_id(self, mocker):
        # Arrange
        volume_path_pattern = "/path/to/volume/{patient_id}.nii"
        mask_path_pattern = "/path/to/mask/{patient_id}/{organ}/{observer}.nii"
        patient_id = "12345"
        mock_volume = np.zeros((10, 10, 10))
        from src.data_operations.datatypes import Mask
        from src.data_operations.load_nifti import load_patient_scan

        mock_mask = [Mask(np.zeros((10, 10, 10)))]

        mocker.patch(
            "src.data_operations.data_loading_nifti.load_volume",
            return_value=mock_volume,
        )
        mocker.patch(
            "src.data_operations.data_loading_nifti.load_mask_multiple_observers",
            return_value=mock_mask,
        )

        # Act
        patient_scan = load_patient_scan(
            volume_path_pattern, mask_path_pattern, patient_id
        )

        # Assert
        assert patient_scan.patient_id == patient_id
        assert np.array_equal(patient_scan.volume, mock_volume)
        assert patient_scan.mask == mock_mask

    # Validates the structure and data types of the returned PatientScan object
    def test_correctly_loads_volume_and_mask_for_valid_patient_id(self, mocker):
        volume_path_pattern = "/path/to/volume/{patient_id}.nii"
        mask_path_pattern = "/path/to/mask/{patient_id}/{organ}/{observer}.nii"
        patient_id = "12345"
        mock_volume = np.zeros((10, 10, 10))
        from src.data_operations.datatypes import Mask
        from src.data_operations.load_nifti import load_patient_scan

        mock_mask = [Mask(np.zeros((10, 10, 10)))]

        mocker.patch(
            "src.data_operations.data_loading_nifti.load_volume",
            return_value=mock_volume,
        )
        mocker.patch(
            "src.data_operations.data_loading_nifti.load_mask_multiple_observers",
            return_value=mock_mask,
        )

        patient_scan = load_patient_scan(
            volume_path_pattern, mask_path_pattern, patient_id
        )

        assert patient_scan.patient_id == patient_id
        assert np.array_equal(patient_scan.volume, mock_volume)
        assert patient_scan.mask == mock_mask


class TestLoadPatientScans:

    # Correctly loads a PatientScan when given valid volume and mask path patterns
    def test_correctly_loads_patient_scan_with_valid_paths(self, mocker):
        # Mock dependencies
        mocker.patch(
            "src.data_operations.data_loading_nifti.resolve_path_placeholders",
            return_value=["/path/to/1_CT.nii.gz"],
        )
        mocker.patch(
            "src.data_operations.data_loading_nifti.placeholder_matches",
            return_value=[("1",)],
        )
        from src.data_operations.load_nifti import load_patient_scans
        from src.data_operations.datatypes import PatientScan

        mocker.patch(
            "src.data_operations.data_loading_nifti.load_patient_scan",
            return_value=PatientScan(patient_id="1", volume=np.array([]), mask=[]),
        )

        # Initialize and invoke the load_patient_scans function
        patient_scans = load_patient_scans(
            volume_path_pattern="/path/to/{patient_id}_CT.nii.gz",
            mask_path_pattern="/path/to/{patient_id}_CT_{organ}_{observer}.nii.gz",
        )

        # Iterate over the generator to load patient scans
        result = list(patient_scans)

        # Assertions
        assert len(result) == 1
        assert result[0].patient_id == "1"

    # Handles missing volume files gracefully
    def test_handles_missing_volume_files_gracefully(self, mocker):
        # Mock dependencies
        mocker.patch(
            "src.data_operations.data_loading_nifti.resolve_path_placeholders",
            return_value=[],
        )
        mocker.patch(
            "src.data_operations.data_loading_nifti.placeholder_matches",
            return_value=[],
        )
        from src.data_operations.load_nifti import load_patient_scans

        # Initialize and invoke the load_patient_scans function
        patient_scans = load_patient_scans(
            volume_path_pattern="/path/to/{patient_id}_CT.nii.gz",
            mask_path_pattern="/path/to/{patient_id}_CT_{organ}_{observer}.nii.gz",
        )

        # Iterate over the generator to load patient scans
        result = list(patient_scans)

        # Assertions
        assert len(result) == 0


# Generated by CodiumAI

import pytest


class TestLoadMask:

    # Correctly loads mask when given valid mask_path_pattern with organ placeholders
    def test_loads_mask_with_valid_path_pattern(self, mocker):
        mask_path_pattern = "/path/to/{organ}_mask.nii.gz"
        observer = "Alice"

        # Mocking the resolve_path_placeholders and nib.load functions
        mocker.patch(
            "src.data_operations.data_loading_nifti.resolve_path_placeholders",
            return_value=["/path/to/bladder_mask.nii.gz", "/path/to/brain_mask.nii.gz"],
        )
        mocker.patch(
            "src.data_operations.data_loading_nifti.placeholder_matches",
            return_value=[("bladder",), ("brain",)],
        )
        mock_nib_load = mocker.patch("nibabel.load")
        mock_nib_load.return_value.get_fdata.return_value = np.array([1, 2, 3])
        from src.data_operations.load_nifti import load_mask

        mask = load_mask(mask_path_pattern, observer)

        assert set(mask.get_organs()) == {"bladder", "brain"}
        assert mask.observer == observer

    # Raises assertion error when mask_path_pattern does not contain {organ} placeholder
    def test_raises_assertion_error_without_organ_placeholder(self):
        mask_path_pattern = "/path/to/mask.nii.gz"
        observer = "Alice"
        from src.data_operations.load_nifti import load_mask

        with pytest.raises(
            AssertionError, match="mask_path_pattern must contain {organ}"
        ):
            load_mask(mask_path_pattern, observer)

    # Handles mask_path_pattern with no matching files
    def test_handles_no_matching_files(self, mocker):
        mask_path_pattern = "/path/to/{organ}_mask.nii.gz"
        observer = "Alice"

        # Mocking the resolve_path_placeholders to return an empty list
        mocker.patch(
            "src.data_operations.data_loading_nifti.resolve_path_placeholders",
            return_value=[],
        )
        from src.data_operations.load_nifti import load_mask

        mask = load_mask(mask_path_pattern, observer)

        assert mask.get_organs() == []
        assert mask.observer == observer
